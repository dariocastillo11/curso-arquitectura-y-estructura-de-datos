// Listas_01.cpp 
//
#include <cstdlib>
#include <iostream>
#include <sstream>

using namespace std;

template <class T> class Nodo {
    private:
        T dato;
        Nodo* next;
    public:

    //construcor sin parametro
        Nodo() { 
            next = NULL; 
            };
        
        //constructor con parametro
        Nodo(T a) { 
            dato = a; next = NULL; 
            };
        
        
        void set_dato(T a) { 
            dato = a; 
            };
        
        void set_next(Nodo* n) { 
            next = n; 
            };
        
        T get_dato() { 
            return dato; 
            };
            
        Nodo* get_next() {
             return next; 
             };
             
             
        bool es_vacio() { 
            return next == NULL; //retorna true o false si esta vacio
            }
};





template <class T> class Lista {
    
    
    private: Nodo<T>* czo;
    public:
    
    //constructor sin parametro
        Lista() { 
            czo = new Nodo<T>(); 
            };
    //constructor con prametro.. le mandamos un puntero 
        Lista(Nodo<T>* n) {
             czo = n; 
             };
             
        //~Lista(void);
        void add(T d);
        bool esvacia(void);
        T cabeza(void);
        Lista* resto(void);
        string toPrint(string p);
        T suma(T i);
        int size();
        void borrar(void);
        void borrar_last();
};




    template <class T>
    void Lista<T>::add(T d)
    {
        Nodo<T>* nuevo = new Nodo<T>(d);
        nuevo->set_next(czo);
        czo = nuevo;
    }
    
    
    
    
    template <class T>
    bool Lista<T>::esvacia(void)
    {
        return czo->es_vacio();
    }
    
    
    template <class T>
    T Lista<T>::cabeza(void)
    {
        if (esvacia()) {
            cout << " Error, Cabeza de lista vacia";
            return NULL;
        }
        return czo->get_dato();
    }
    
    

    template <class T>
    Lista<T>* Lista<T>::resto(void)
    {
        Lista* l = new Lista(czo->get_next());
        return (l);
    }



    template <class T>
    string Lista<T>::toPrint(string p)
    {
        if (this->esvacia()) {
            return p;
        }
        else {
            //std::ostringstream stm;
            ostringstream stm;
            stm << this->cabeza() << "-" << this->resto()->toPrint(p) << endl;
            //cout<<endl<<" stm.str()= "<<stm.str()<<endl;
            return stm.str();
        }
    }
    
    
    

    template <class T>
    T Lista<T>::suma(T i)
    {    //cout<<" i al entrar= "<<i<<endl;
        if (this->esvacia()) {
            return i;
        }
        else {

            //cout<<"this->cabeza()= "<<this->cabeza()<<endl;   
            return this->resto()->suma(i + this->cabeza());
        }
    }

    template <class T>
    int Lista<T>::size(){
        
       
        
        if(this->esvacia()){
            return 0;
            }
            
        else{
            return 1+this->resto()->size();
            }
        }
    template <class T>
    void Lista<T>::borrar(void){
        if(!this->esvacia()){
            Nodo<T>* a = czo;
            czo = czo->get_next();//borrado logico
            delete a;//borrado fisico
            cout << "SE BORRO TODO"<<endl;
            }
        }
        
    template <class T>
    void Lista<T>::borrar_last(){
        if(!this->esvacia()){
            //borra el ultimo nodo
            if((czo->get_next())->get_next()==NULL){
                delete czo->get_next();//borrado fisico del nodo que tiene
                czo->set_next(NULL);//transformando el penultimo en ultimo
                }
            else{
                this->resto()->borrar_last();                
                }
            
        
        }


    int main()
    {
        Lista<string>* l = new Lista<string>();
        
        Lista<int>* r = new Lista<int>();
        
        Lista<string>* l2 = new Lista<string>();
        
        l->add(" 11x");
        l->add(" 22y");
        l->add(" 33z");
        r->add(100);
        r->add(22);
        cout << "l= "<<l->toPrint("fin") << endl;
        cout << "r= " << r->toPrint("fin") << endl;
        cout << "suma:" << r->suma(0) << endl;
        cout << "tamanio de l:  "<<l->size()<<endl;
        cout << "tamanio de r:  "<<r->size()<<endl;
        l->borrar();
        cout << "l= "<<l->toPrint("fin") << endl;
        l->borrar_last();
        cout << "l= "<<l->toPrint("fin") << endl;
        return EXIT_SUCCESS;

}

/*
int size();// cantidad de nodos de la lista
void borrar(void); //borra la cabeza
void borrar_last();//borra el ultimo
void concat(Lista* l1);// le transfiere los datos de l1 a this
Lista* copy(void);// hace una copia de la lista
void tomar(int n);//deja "vivos" los n primeros nodos y borra el resto
*/
